{
    // TSLint Configuration file for MathHub
    "extends": [
        "tslint:latest", 
        "tslint-react",
        "tslint-microsoft-contrib"
    ],

    // the MathHub Compilation Process interrupts iff there are errors
    // hence by default, everything that can occur during automcompletion
    // and common development just throws a warning
    "defaultSeverity": "warning",

    // we explicitly configure each setting
    // so that we complete control over what is enabled and what isn't
    "rules": {
        // we require overloaded signatures (if any) to be consecutive
        "adjacent-overload-signatures": {
            "severity": "error"
        },
        
        // disallow Object, String and Symbol types
        // use their more canonical implementations inside
        "ban-types": {
            "severity": "error",
            "options": [
                ["Object", "Use {} instead."],
                ["String", "Use string instead."],
                ["Symbol", "Use symbol instead."]
            ]
        },

        // nothing should be annotated as public, because it is the default
        "member-access": {
            "severity": "error",
            "options": "no-public"
        },

        // members should have statics first, and then everything else
        // but not neccessarily alphabetized
        "member-ordering": {
            "options": {
                "order": [
                    "public-constructor",
                    "private-constructor",
    
                    "public-static-field",
                    "private-static-field",
    
                    "public-instance-field",                
                    "private-instance-field",
    
                    "public-instance-method",
                    "protected-instance-method",
                    "private-instance-method"
                ],
                "alphabetize": false
            }
        },

        // handled by below
        "no-unsafe-any": false,

        // do not allow any any usage
        "no-any": {
            "severity": "error"
        },

        // do not allow empty interfaces
        // but this might happen temporarily during development
        "no-empty-interface": true,

        // do not allow to import things for side-effects only
        // except for .css files
        "no-import-side-effect": {
            "severity": "error",
            "options": {
                "ignore-module": "(\\.css)$"
            }
        },

        // we do not want to use primitive types
        // in type annotations that are initilized
        "no-inferrable-types": {
            "severity": "error"
        },

        // we do not want to use the module keyword
        "no-internal-module": {
            "severity": "error"
        },

        // we do not want any magic numbers
        // however we need them for column widths
        // TODO: can we limit this sensibly
        "no-magic-numbers": false,

        // do not use namespace
        "no-namespace": {
            "severity": "error"
        },

        // do not allow to explicitly declare something as non-null
        // if this is needed, it should be explicitly disabled
        // by an inline comment
        "no-non-null-assertion": true,

        // do not allow parameters to be reassinged
        // if this is needed, define a new const instead
        "no-parameter-reassignment": {
            "severity": "error"
        },

        // do not allow typescript type references
        // use import "..." instead
        "no-reference": {
            "severity": "error"
        },

        // do not annotate something if the type is not changed
        "no-unnecessary-type-assertion": true,

        // do not import anything with require()
        // use import instead
        "no-var-requires": {
            "severity": "error"
        },

        // disalllow using classical functions
        // but enable them in standalone declarations
        // like e.g. function worker() { ... }
        "only-arrow-functions": {
            "severity": "error",
            "options": ["allow-declarations"]
        },

        // use for ... of loops instead of anything else
        "prefer-for-of": true,
        
        // anything returning only a promise should be an async function
        // so that we can use "await". 
        "promise-function-async": {
            "options": [
                "check-function-declaration",
                "check-function-expression",
                "check-arrow-function",
                "check-method-declaration"
            ]
        },

        // we do not enforce any type declarations
        "typedef": false,

        // for the ones where we have definitions
        // we want no space to the left but some space to the right
        "typedef-whitespace": {
            "options": [
                {
                    "call-signature": "nospace",
                    "index-signature": "nospace",
                    "parameter": "nospace",
                    "property-declaration": "nospace",
                    "variable-declaration": "nospace"
                },
                {
                    "call-signature": "space",
                    "index-signature": "space",
                    "parameter": "space",
                    "property-declaration": "space",
                    "variable-declaration": "space"
                }
            ]
        },

        // anything that could be unified into one declaration should be
        "unified-signatures": true,

        // when using await, the paremeter should always be a promise
        "await-promise": {
            "severity": "error"
        },

        // do not use the comma operator
        // because it behaves extremly weird
        "ban-comma-operator": {
            "severity": "error"
        },

        // we do not need any particular functions to be banned
        "ban": false,

        // disallow curly braces, if they are not needed
        "curly": {
            "options": "as-needed"
        },

        // for ... in loops should be filtered
        "forin": true,
        
        // do not disable any imports
        // TODO: Do we want semantic-ui-react here?
        "import-blacklist": {
            "severity": "error",
            "options": ["fs"]
        },

        // Do not allow any kind of labels outside of loops
        "label-position": {
            "severity": "error"
        },

        // do not allow arguments.callee
        "no-arg": {
            "severity": "error"
        },

        // disallow bitwise operator
        "no-bitwise": {
            "severity": "error"
        },

        // there should not be assingnments
        // within an if(), for(), ...
        "no-conditional-assignment": {
            "severity": "error"
        },

        // use console if you must
        // but only during debugging
        "no-console": true,

        // do not use new Boolean(), new Number(), new String()
        // as they are common pitfalls
        "no-construct": {
            "severity": "error"
        },

        // ise debugger; if you must
        // but only during debugging
        "no-debugger": true,

        // do not call super() more than once
        "no-duplicate-super": {
            "severity": "error"
        },

        // do not duplicate cases in a switch statement
        "no-duplicate-switch-case": true,

        // we do not need this rule
        // because we do not allow 'var's
        "no-duplicate-variable": false,

        // do not do delete when the key is dynamic
        "no-dynamic-delete": {
            "severity": "error"
        },

        // do not allow empty statements
        // except during debugging
        "no-empty": {
            "options": "allow-empty-catch"
        },

        // eval is evil()
        "no-eval": {
            "severity": "error"
        },

        // promises should not be left floating
        // but may do so during development
        "no-floating-promises": true,

        // you should never use for ... in over an array
        "no-for-in-array": {
            "severity": "error"
        },

        // dependencies need to be explicitly stated
        // in package.json or they may not be imported
        // this is an error as it's the same as importing a non-existing dependency
        "no-implicit-dependencies": {
            "severity": "error"
        },

        // we allow object types to be inferred as empty
        "no-inferred-empty-object-type": false,

        // useing ${} inside a normal string
        // will not work
        // this might be overwritten without much error
        "no-invalid-template-strings": true,

        // this is only valid within the bodies of classes
        "no-invalid-this": {
            "severity": "error"
        },

        // do not use new for things it's not supposed to do
        "no-misused-new": {
            "severity": "error"
        },

        // we allow null, because it's needed by react
        "no-null-keyword": false,

        // you should never assert something as being of a literal type
        "no-object-literal-type-assertion": {
            "severity": "error"
        },

        // "return await x" makes no sense. 
        // instead "return x" should be used
        "no-return-await": {
            "severity": "error"
        },

        // shadowing variables is a bad idea
        // and should never be done
        "no-shadowed-variable": {
            "severity": "error"
        },

        // if you want a sparse array
        // use undefined explicitly instead
        "no-sparse-arrays": {
            "severity": "error"
        },

        // you should not use a string literal
        // if the property can be used without one
        "no-string-literal": {
            "severity": "error"
        },

        // you can only throw Errors
        "no-string-throw": {
            "severity": "error"
        },

        // you shouldn't import submodules
        // TODO: Which exceptions do we want here
        "no-submodule-imports": true,

        // if you really need to fall-through
        // add a copmment /* falls through */
        // before the case that is supposed to fall
        "no-switch-case-fall-through": true,

        // do not do old-style var self = this;
        // use arrow functions instead
        "no-this-assignment": {
            "severity": "error"
        },

        // if you did not bind a method
        // you should not call it dynamically
        "no-unbound-method": true,
        
        // classes should not be used if everything
        // is static
        "no-unnecessary-class": true,
        
        // if you use finally
        // do not exit or jump out of them
        "no-unsafe-finally": {
            "severity": "error"
        },

        // expressios should be used
        // except if they are fast-null-checks
        "no-unused-expression": {
            "options": "allow-fast-null-checks"
        },

        // variables should be used
        // but this rules is deprecated so we don't use it
        "no-unused-variable": false,
        
        // we want some declarations in reverse order
        // so disable this
        "no-use-before-declare": false,

        // use only 'const' and 'let'
        "no-var-keyword": {
            "severity": "error"
        },

        // allow using void as expressions
        "no-void-expression": false,

        // always use conditional expressions
        // if available
        "prefer-conditional-expression": {
            "options": "check-else-if"
        },
        
        // instead of Object.assign
        // use the spread operator
        "prefer-object-spread": true,

        // parseInt() needs to use the radix
        // parameter
        "radix": {
            "severity": "error"
        },
        
        // when using +, the objects need to be
        // of the same type
        "restrict-plus-operands": {
            "severity": "error"
        },

        // boolean expressions can be anything
        "strict-boolean-expressions": false,
        
        // this rule is somewhat broken
        // and reports too many false positives
        "strict-type-predicates": false,

        // a switch statement needs
        // a default case
        "switch-default": {
            "severity": "error"
        },

        // no javascript, == does not exist
        "triple-equals": {
            "severity": "error"
        },

        // when using typeof, you should use strings
        // however this rules is deprecated
        // so we don't use it
        "typeof-compare": false,

        // if you're using the default
        // it would be much more readable
        // if you just omit the parameter
        "use-default-type-parameter": true,

        // check is things are NaN by using isNaN
        "use-isnan": true,

        // cyclomatic complexity of functions should not
        // exceed 20, or the abstraction should be reviewed
        "cyclomatic-complexity": {
            "options": 20
        },

        // deprecated functions should not be used
        "deprecation": true,
        
        // end of line is needed
        "eofline": true,

        "indent": {
            "options": ["spaces", 4]
        },

        // you have to use LF
        // so don't Windows
        "linebreak-style": {
            "severity": "error",
            "options": "LF"
        },

        // you can have however many classes you want
        // inside of each file
        "max-classes-per-file": false,

        // files can be as long as you want them to
        "max-file-line-count": false,

        // lines should be of at most length 120
        // except for imports / exports
        "max-line-length": {
            "options": {
                "limit": 120,
                "ignore-pattern": "^import |^export {(.*?)}"
            }
        },

        // we do want default exports
        "no-default-export": false,

        // we do not want duplicate imports
        // but these may just be allowed during development
        "no-duplicate-imports": true,

        // this rule isn't needed because
        // we do not allow namespaces
        "no-mergeable-namespace": false,

        // require() is not a part of our syntax
        "no-require-imports": {
            "severity": "error"
        },

        // do not sort object literal keys
        "object-literal-sort-keys": false,

        // you should use const if you can
        "prefer-const": true,

        // things should be marked as read-only
        // if they are never modified
        "prefer-readonly": true,

        // all the trailing commas are needed
        // except when forbidden by the spec
        "trailing-comma": {
            "options": {
                "multiline": "always",
                "singleline": "never",
                "esSpecCompliant": true
            }
        },

        // we want everything to be aligned
        // TODO: We might want to turn this off
        // if it becomes too annoying
        "align": {
            "options": [
                "arguments",
                "elements",
                "members",
                "parameters",
                "statements"
            ]
        },

        // the type of an array should be T[] for
        // primitive types
        "array-type": {
            "options": "array-simple"
        },

        // we need parenthesis around arrow functions
        // except if they only have a single argument
        "arrow-parens": {
            "options": "ban-single-arg-parens"
        },

        // and arrow function should avoid { return x; }
        // unless if is multiline
        "arrow-return-shorthand": true,
        
        // when adding things, the order of operands
        // should be x + 1 instead of 1 + x
        "binary-expression-operand-order": true,

        // if a type only has a callable
        // then it needs to be a function type
        "callable-types": {
            "severity": "error"
        },

        // class names should be PascalCase
        "class-name": true,

        // comments need to start with a space
        // but may be other things as well
        "comment-format": {
            "options": ["check-space"]
        },

        // in general we do want documentation
        // but this should not be a compilation warning
        "completed-docs": false,

        // everything is UTF-8
        "encoding": {
            "severity": "error"
        },

        // nothing should be in the header
        "file-header": false,

        // file name casing depends on the file itself 
        "file-name-casing": true,

        // we need spaces around imports
        "import-spacing": true,

        // interfaces should start with an I
        // to mark them as such
        "interface-name": true,

        // if you can write a type as an interface
        // you should do so
        "interface-over-type-literal": true,

        // jsdoc comments should have the first line
        // as an empty line
        "jsdoc-format": {
            "severity": "error",
            "options": "check-multiline-start"
        },

        // if you import a default name
        // it needs to be of the same name
        "match-default-export-name": {
            "severity": "error"
        },

        // returns need a newline
        "newline-before-return": true,

        // chained calls are
        "newline-per-chained-call": false,

        // when calling new, put parentheses around it
        "new-parens": true,

        // use 'x as T' instead of <T>x
        "no-angle-bracket-type-assertion": {
            "severity": "error"
        },

        // do not compare to a boolean literal
        // use if() directly
        "no-boolean-literal-compare": {
            "severity": "error"
        },
        
        // do not allow more than 2
        // consecutive blank lines
        "no-consecutive-blank-lines": {
            "options": 2
        },

        // whitespace should be regular, i.e. of the same kind
        "no-irregular-whitespace": true,

        // we want to allow parameter properties
        // TODO: Enforce them?
        "no-parameter-properties": false,

        // do not jsdoc of types
        // because typescript does that already
        "no-redundant-jsdoc": true,

        // <reference types=... /> should never be used
        "no-reference-import": {
            "severity": "error"
        },

        // no trailing whitespace
        // except inside of template strings
        "no-trailing-whitespace": {
            "options": "ignore-template-strings"
        },

        // replace (x) => f(x) with f
        "no-unnecessary-callback-wrapper": true,

        // do not let x = undefined, just let x. 
        "no-unnecessary-initializer": {
            "severity": "error"
        },

        // we don't need this, as we don't have namespaces
        "no-unnecessary-qualifier": false,

        // number literals should be consistent
        "number-literal-format": {
            "severity": "error"
        },

        // object literal quotes should be consistent
        // that is either all quoted or all unquoted
        "object-literal-key-quotes": {
            "options": "consistent-as-needed"
        },

        // allow object literal shorthand
        "object-literal-shorthand": false,

        // all the opening brackets
        // should be on the same line
        "one-line": {
            "options": [
                "check-catch",
                "check-finally",
                "check-else",
                "check-open-brace",
                "check-whitespace"
            ]
        },

        // we want one variable per declaration
        // except maybe in for loops
        "one-variable-per-declaration": {
            "severity": "error",
            "options": "ignore-for-loop"
        },

        // imports should be ordered
        // but this needs to just be a warning
        // to not break because of autocompletion
        "ordered-imports": {
            "options": {
                "grouped-imports": true,
                "import-sources-order": "case-insensitive",
                "module-source-path": "full"
            }
        },

        // methods that do not use this should be static
        // except for methods that are protected
        "prefer-function-over-method": {
            "options": ["allow-protected", "allow-public"]
        },

        // you need to always declare foo() => T
        // instead of foo: () => T
        "prefer-method-signature": {
            "severity": "error"
        },

        // if we have an if with >= 4 cases
        // we should use a switch
        "prefer-switch": {
            "options": {
                "min-cases": 4
            }
        },

        // use template strings
        // over concatination
        "prefer-template": true,

        // for loops need an initilizer
        // or should be while()
        "prefer-while": {
            "severity": "error"
        },

        // enforce double quotes
        // to make them different from template strings
        // except where escapes would be needed
        "quotemark": {
            "options": [
                "double",
                "avoid-escape",
                "avoid-template"
            ]
        },

        // return may not "return undefined"
        "return-undefined": {
            "severity": "error"
        },

        // you must always put a semicolon
        "semicolon": {
            "severity": "error"
        },

        // we want spaces in front of brackets
        // of anything anonymous
        "space-before-function-paren": {
            "options": {
                "anonymous": "always",
                "named": "never",
                "asyncArrow": "always",
                "method": "never",
                "constructor": "never"
            }
        },

        // there should be no space within brackets
        "space-within-parens": {
            "options": 0
        },

        // switch statements should end with a break
        // so that we can continue them later
        "switch-final-break": true,

        // type literals should be seperated by ;s
        "type-literal-delimiter": true,

        // there is no convention for variable names
        // and you may call them whatever you like
        "variable-name": false,

        // there should be whitespace around everything
        "whitespace": {
            "options": [
                "check-branch",
                "check-decl",
                "check-operator",
                "check-separator",
                "check-type",
                "check-typecast",
                "check-type-operator",
                "check-rest-spread",
                "check-module"
            ]
        },

        // enforce the alignment of jsx elements
        "jsx-alignment": true,

        // do not ban any JSX Elements (for now)
        "jsx-ban-elements": false,

        // enforce using boolean without a value
        "jsx-boolean-value": {
            "options": "never"
        },

        // jsx may have spaces around {}s
        "jsx-curly-spacing": false,

        // do not allow spaces after the = sign
        "jsx-equals-spacing": {
            "options": "never"
        },

        // there should always be a .map() key prop
        "jsx-key": true,

        // do not allow doing a .bind() in render methods
        "jsx-no-bind": {
            "severity": "error"
        },

        // do not create new lambdas in render methods
        "jsx-no-lambda": {
            "severity": "error"
        },

        // sometimes the js becomes big
        // so multi-lining it is ok
        "jsx-no-multiline-js": false,

        // refs need to always be a ref object
        // and not a string
        "jsx-no-string-ref": {
            "severity": "error"
        },

        // we always want to use string literals
        // because we are mono-lingual
        "jsx-use-translation-function": false,

        // if possible, everything should self close
        "jsx-self-close": true,

        // before closing an element, there should be
        // a space
        "jsx-space-before-trailing-slash": true,

        // multiline elements should be wrapped
        // inside brackets
        "jsx-wrap-multiline": true,

        // we're not using Chai, so disable all of these
        "chai-prefer-contains-to-index-of": false,
        "chai-vague-errors": false,

        // exports should match the file name
        // this should be overwritten for "export default f(x)"
        "export-name": true,

        // this is already achieved by a different rule
        "function-name": false,

        // imports should match the thing being imported
        // TODO: Import this once the bug is fixed
        "import-name": false, /*{
            "options": {
                "axios": "Axios"
            }
        },*/

        // do not put useless comments
        // TODO: Once implemented use this
        "informative-docs": false,

        // you should never use insecure random sources
        // instead make use of crypto.randomBytes instead
        "insecure-random": {
            "severity": "error"
        },

        // we are not using jQuery, so disable this
        "jquery-deferred-must-complete": false,

        // function bodies may be as long as they like
        "max-func-body-length": false,

        // rule is deprecated
        "missing-jsdoc": false,

        // rule is depreacted
        "missing-optional-annotation": false,
        
        // we're not using mocha
        "mocha-avoid-only": false,
        "mocha-no-side-effect-code": false,
        "mocha-unneeded-done": false,

        // we're not using those
        "no-backbone-get-set-outside-model": false,

        // do not use eval, arguments, ...
        "no-banned-terms": {
            "severity": "error"
        },

        // do not use constant conditions
        // just don't put them in the first place
        "no-constant-condition": true,

        // do not put control characters
        "no-control-regex": {
            "severity": "error"
        },

        // cause GDPR
        "no-cookies": {
            "severity": "error"
        },

        // already covered by over rules
        "no-delete-expression": false,
        "no-disable-auto-sanitization": false,

        // do not use document.domain
        "no-document-domain": {
            "severity": "error"
        },
        "no-document-write": {
            "severity": "error"
        },
        
        // deprecated
        "no-duplicate-case": false,
        "no-duplicate-parameter-names": false,
        "no-empty-interfaces": false,
        
        // no empty lines after opening braces
        "no-empty-line-after-opening-brace": true,

        // do not use execScript
        "no-exec-script": {
            "severity": "error"
        },

        // do not use for ... in
        // instead use an array
        "no-for-in": {
            "severity": "error"
        },
        
        // do not define functions with a string body
        "no-function-constructor-with-string-args": {
            "severity": "error"
        },

        // already covered by other rules
        "no-function-expression": false,

        // urls should start with https://
        "no-http-string": true,

        // avoid using increment and decrement operators
        "no-increment-decrement": true,

        // do not use .innerHTML
        "no-inner-html": {
            "severity": "error"
        },

        // regular expressions need to be valid
        "no-invalid-regexp": {
            "severity": "error"
        },

        // we are not using jquery
        "no-jquery-raw-elements": false,

        // deprecated
        "no-missing-visibility-modifiers": false,

        // do not use multiline strings -- out-source big ones into files
        "no-multiline-string": {
            "severity": "error"
        },

        // deprecated
        "no-multiple-var-decl": false,

        // do not use octals
        "no-octal-literal": {
            "severity": "error"
        },

        // you may have spaces in regex
        "no-regex-spaces": false,

        // you may have relative imports
        "no-relative-imports": false,

        // do not use certain keywords as idenitifiers
        "no-reserved-keywords": {
            "severity": "error"
        },

        // if comments are a single line, they should not be blocks
        "no-single-line-block-comment": true,

        // deprecated
        "no-stateless-class": false,
        
        // do not use setImmediate with strings
        "no-string-based-set-immediate": {
            "severity": "error"
        },
        
        // do not use setInterval with strings
        "no-string-based-set-interval": {
            "severity": "error"
        },

        // do not use setTimeout with strings
        "no-string-based-set-timeout": {
            "severity": "error"
        },
        
        // we want comments like this to show up as warnings
        "no-suspicious-comment": true,

        // use === undefined instead of typeof === undefined
        "no-typeof-undefined": true,

        // we are mono-lingual, so we do not use this string
        "no-unexternalized-strings": false,

        // do not do .bind(this), instead use arrow functions
        "no-unnecessary-bind": true,

        // do not initialize fields
        "no-unnecessary-field-initialization": true,

        // do not "const x = ...; return x"
        "no-unnecessary-local-variable": true,

        // never override when only calling super()
        "no-unnecessary-override": true,
        
        // we might have unsupported browser code
        "no-unsupported-browser-code": false,

        // warn about unneeded files
        "no-useless-files": true,

        // deprecated
        "no-var-self": false,
        
        // with statements are evil
        "no-with-statement": {
            "severity": "error"
        },

        // we do not use the fs module
        // so we do not need this
        "non-literal-fs-path": false,

        // require() calls need to be literals
        "non-literal-require": {
            "severity": "error"
        },

        // not using node so not relevant
        "possible-timing-attack": false,

        // taken care of by another rule 
        "prefer-array-literal": false,

        // superseeded by other rules
        "prefer-type-cast": false,
        "promise-must-complete": false,

        // do not use a11l for now
        "react-a11y-anchors": false,
        "react-a11y-aria-unsupported-elements": false,
        "react-a11y-event-has-role": false,
        "react-a11y-image-button-has-alt": false,
        "react-a11y-img-has-alt": false,
        "react-a11y-input-elements": false,
        "react-a11y-lang": false,
        "react-a11y-meta": false,
        "react-a11y-no-onchange": false,
        "react-a11y-props": false,
        "react-a11y-proptypes": false,
        "react-a11y-required": false,
        "react-a11y-role-has-required-aria-props": false,
        "react-a11y-role-supports-aria-props": false,
        "react-a11y-role": false,
        "react-a11y-tabindex-no-positive": false,
        "react-a11y-titles": false,
        
        // we allow non-simple attributes
        "use-simple-attributes": false,
        
        // we do not care about anchor elements
        "react-anchor-blank-noopener": false,

        // we do not use iframes
        "react-iframe-missing-sandbox": false,

        // you should not set innerHTML dangerously
        // if this is needed, override it locally
        "react-no-dangerous-html": true,

        // already done by other rules
        "react-this-binding-issue": false,
        "react-tsx-curly-spacing": false,

        // props should not go unused
        "react-unused-props-and-state": true,

        // we do not use underscore
        "underscore-consistent-invocation": false,

        // arguments is already disabled
        "use-named-parameter": false,

        // deprecated
        "valid-typeof": false
    },


    "jsRules": {},
    "rulesDirectory": [],

    // exclude all the json files
    "linterOptions": { "exclude": [ "**/*.json" ] }
}